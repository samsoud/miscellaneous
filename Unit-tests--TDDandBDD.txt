DD or Test-Driven Development, 
Behavior-Driven Development. 
Software Delivery Life Cycle principles
which one of them is the best approach? Can you use all of them?
The two currently popular methodologies are Waterfall and Agile

Unit testing
A unit test focuses on a single “unit of code” – usually a function in an object or module. 
By making the test specific to a single function, the test should be simple, quick to write, and quick to run.
 
This means you can have many unit tests, and more unit tests means more bugs caught. 
They are especially helpful if you need to change your code: When you have a set of unit tests verifying your code works, 
you can safely change the code and trust that other parts of your program will not break.

A unit test should be isolated from dependencies – for example, no network access and no database access. 
There are tools that can replace these dependencies with fakes you can control. 
This makes it trivial to test all kinds of scenarios that would otherwise require a lot of setup. For example, 
imagine having to set up an entire database just to run a test. Ugh, no thanks.

The basic pieces of a unit test are there: Individual tests, which test one thing, and they are isolated from each other. 
You could use scripts like this to build rudimentary unit tests for your code. 
But using an actual unit testing tool such as Mocha or Jasmine will make it easier to write tests, and they have other helpful features such as better reporting when tests fail (which makes it easier to find out what went wrong)

Some think that any automated test is a unit test. This is not true. There are different types of automated tests, and each type has its own purpose.

Here are three of the most common types of automated tests:

Unit tests: A single piece of code (usually an object or a function) is tested, isolated from other pieces
Integration tests: Multiple pieces are tested together, for example testing database access code against a test database
Acceptance tests (also called Functional tests): Automatic testing of the entire application, for example using a tool like Selenium to automatically run a browser.